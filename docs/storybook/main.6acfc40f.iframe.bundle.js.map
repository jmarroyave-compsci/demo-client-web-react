{"version":3,"file":"main.6acfc40f.iframe.bundle.js","mappings":";;;;;;;;AA0DA;;;;;;;;;;ACuLA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvOA;;;;;;;;;;ACAA","sources":["webpack://react/./src/framework/core/ui/horizontal-list.js","webpack://react/./src/framework/core/ui/list.js","webpack://react/./src/project/components/pages/stories/awards/banner.js","webpack://react/./src/project/components/pages/stories/podcast-music/banner.js"],"sourcesContent":["import React from 'react';\r\nimport styled, { css } from 'styled-components'\r\nimport PropTypes from 'prop-types';\r\nimport Placeholder from 'core/ui/placeholder';\r\n\r\n\r\nclass HorizontalList extends React.Component {\r\n  render(){    \r\n    const { data, loading } = this.props;\r\n    if(!data || loading) return this.renderPlaceholder();\r\n    return this.renderContent(data);\r\n  }\r\n\r\n  renderContent(data){\r\n    return this.renderTemplate(data);\r\n  }\r\n\r\n  renderPlaceholder(){\r\n    var items = []\r\n    new Array(1,2,3).map((item, idx)=>items.push(<Placeholder data={[[[\"-\", \"80\", \"10\"]]]}/>))\r\n    return this.renderTemplate(items);\r\n  }\r\n\r\n  renderTemplate(items){   \r\n  \treturn (\r\n  \t\t<Container>\r\n  \t\t\t{items.map((item, idx) =>\r\n  \t\t\t\t<ContainerItem key={idx}>\r\n  \t\t\t\t\t{item}\r\n  \t\t\t\t</ContainerItem>\r\n\t\t\t)}\r\n  \t\t</Container>\r\n\t)\r\n  }\r\n}\r\n\r\n\r\nHorizontalList.propTypes = {\r\n  data: PropTypes.array,\r\n  loading: PropTypes.bool,\r\n};\r\n\r\nHorizontalList.defaultProps = {\r\n  loading: false,\r\n};\r\n\r\nexport default HorizontalList;\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  flex-orientation: column;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: 0;\r\n  overflow: auto;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst ContainerItem = styled.div`\r\n\tborder: 1px solid #c0c0c0;\r\n\tpadding: 0rem;\r\n\tpadding-right: 0.5rem;\r\n\tmax-width: 100%;\r\n\tbox-sizing: border-box;\r\n`;\r\n\r\n\r\n\r\n","import React, { Suspense, lazy } from 'react';\r\nimport styled, { css } from 'styled-components'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Link from './link';\r\nimport Placeholder from './placeholder';\r\nimport MDAvatar from '@material-ui/core/Avatar';\r\nimport MDList from '@material-ui/core/List';\r\nimport MDListItem from '@material-ui/core/ListItem';\r\nimport MDListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport MDListItemText from '@material-ui/core/ListItemText';\r\nimport MDListSubheader from '@material-ui/core/ListSubheader';\r\nimport MDDivider from '@material-ui/core/Divider';\r\nimport Loading from 'core/components/loading';\r\n\r\nconst FixedSizeList = lazy(() => import(/* webpackChunkName: \"react-window\" */ './external/fixed-size-list'));\r\n\r\n\r\nimport './list.scss';\r\n\r\nclass List extends React.Component {\r\n  constructor(){\r\n    super();\r\n\r\n    this.state = {\r\n      msg : null,\r\n      positions: [],\r\n      items : [],\r\n    }\r\n\r\n    this.group = \"\";    \r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if(prevProps.data !== this.props.data || prevProps.minItems !== this.props.minItems){\r\n      this.setData(this.props.data);\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.setData(this.props.data);\r\n  }\r\n\r\n  setData(data){\r\n    var { maxItems, minItems, groupByLambda } = this.props;\r\n    var msg = null;\r\n\r\n    if(Array.isArray(data) || data == null){\r\n      data = (data) ? data.slice(0,maxItems) : [];\r\n    } else {\r\n      msg = \"data is not an array\";\r\n      data = null;\r\n    }\r\n\r\n    data = (data) ? data : [];\r\n\r\n    minItems = (data.length < minItems) ? minItems : data.length;\r\n\r\n    var items = [];\r\n    var grp = null;\r\n    for(var i = 0; i < minItems; i++){\r\n      if(data.length > i){\r\n        if(groupByLambda){\r\n          var ngroup = this.props.groupByLambda(data[i]);\r\n          if(grp != ngroup){\r\n            grp = ngroup;\r\n            items.push({type: 'grp', data: grp})\r\n          }\r\n        }\r\n        items.push({type: 'item', data: data[i], idx: i})\r\n      } else {\r\n        items.push({type: 'ph', data: null})\r\n      }\r\n    }\r\n\r\n    if(!msg && data.length == 0){\r\n      msg = \"no items\"\r\n    }\r\n    \r\n    //console.log(\"setdata\", msg, items.length, data.length);\r\n\r\n    this.setState({minItems: minItems, maxItems: maxItems, items: items, msg: msg})\r\n  }\r\n\r\n  render() {\r\n  \tvar { displayItems, displayItemHeight, loading, summary, style } = this.props;\r\n  \t//console.log(this.state.msg)\r\n    return (\r\n        <Container className={'core-ui-list'} style={style}>\r\n          {this.state.msg && !loading && <Overlay>{this.state.msg}</Overlay>}\r\n          <div className={`${(this.state.msg) ? 'blur' : ''} list`}>\r\n            {summary && \r\n              <div>\r\n                  {`${this.state.items.length} record(s)`}\r\n              </div>     \r\n            }                                          \r\n            {(displayItems > -1) ?\r\n              this.renderVirtualList(displayItems, displayItemHeight)\r\n              :\r\n              this.renderList()\r\n            }\r\n          </div>\r\n        </Container>\r\n    );\r\n  }\r\n\r\n  renderVirtualList(displayItems, displayItemHeight){\r\n    var items = this.state.items;  \r\n    return (\r\n      <Suspense fallback={<Loading/>}>\r\n        <FixedSizeList height={displayItemHeight * displayItems} width={'100%'} itemSize={displayItemHeight} itemCount={items.length}>\r\n          {({index, style}) => (\r\n            this.renderListItem(items[index], (items.length > index + 1), style, index)\r\n          )}\r\n        </FixedSizeList>                    \r\n      </Suspense>\r\n    )\r\n  }\r\n\r\n  renderList(){\r\n    var items = this.state.items;  \r\n    return (\r\n      <MDList>\r\n        {items.map((item, idx)=>\r\n          this.renderListItem(item, (items.length > idx + 1), {}, idx)\r\n        )}\r\n      </MDList>\r\n    )\r\n  }\r\n\r\n  renderListItem(item, divider, style, key){\r\n    return (\r\n      <div style={style} key={key}>\r\n        {this.renderNext(item)}\r\n        {(divider) && <MDDivider/>}    \r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderNext(item){\r\n    if(this.props.loading) return <ListItemPlaceholder {...this.props}/>;\r\n    if(item.type === \"ph\") return <ListItemEmpty {...this.props}/>;\r\n    if(item.type === \"grp\") return <MDListSubheader className='item-subheader'>{item.data}</MDListSubheader>\r\n\r\n    return this.renderItem(item)\r\n  }\r\n\r\n  renderItem(item){\r\n    if(this.props.goToLambda){\r\n      return (\r\n        <Link border={false} to={this.props.goToLambda(item.data)}>\r\n          <ListItem button item={item} {...this.props}/>\r\n        </Link>         \r\n      )\r\n    } else {\r\n      return (\r\n        <ListItem item={item} {...this.props} />        \r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nfunction ListItemPlaceholder({avatarType}){\r\n    return (\r\n      <MDListItem>\r\n          {(avatarType !== false && avatarType !== 'none') &&\r\n\t          <MDListItemAvatar><MDAvatar> </MDAvatar></MDListItemAvatar>\r\n          }\r\n          <MDListItemText primary={<Placeholder data={[[[\"-\", 220, 10]]]}/>}/>\r\n      </MDListItem>     \r\n    )\r\n}\r\n\r\nfunction ListItemEmpty({avatarType}){\r\n  return (\r\n      <MDListItem>\r\n          {(avatarType !== false && avatarType !== 'none') &&\r\n\t          <MDListItemAvatar><MDAvatar> </MDAvatar></MDListItemAvatar>\r\n          }\r\n          <MDListItemText primary={\" \"}/>\r\n      </MDListItem>     \r\n    )\r\n}\r\n\r\nfunction ListItem({item, button, avatarType, avatarLambda, primaryLambda, numbered, onItemClick}){\r\n  var idx = item.idx;\r\n  item = item.data;\r\n  avatarLambda = (avatarLambda) ? avatarLambda : (item=>item);\r\n\r\n  return (\r\n      <MDListItem className='item' button={button} onClick={()=>(onItemClick) ? onItemClick(item)  : null}>\r\n          {(numbered === true) && <div className='num'>{idx + 1}</div>}\r\n          {(avatarType !== false && avatarType !== 'none') &&\r\n            ((avatarType === \"icon\" || avatarType === \"text\") ?\r\n              <MDListItemAvatar><MDAvatar>{avatarLambda(item)}</MDAvatar></MDListItemAvatar>\r\n            :\r\n              <MDListItemAvatar><MDAvatar src={avatarLambda(item)}></MDAvatar></MDListItemAvatar>\r\n          )}\r\n          <MDListItemText primary={primaryLambda(item)}/>\r\n      </MDListItem>\r\n    )\r\n}\r\n\r\nList.propTypes = {\r\n\tloading: PropTypes.bool,\r\n\tdata: PropTypes.array,\r\n\tdisplayItems: PropTypes.number,\r\n\tmaxItems: PropTypes.number,\r\n\tminItems: PropTypes.number,\r\n\tdisplayItemHeight: PropTypes.number,\r\n\tsummary: PropTypes.bool,\r\n\tstyle: PropTypes.object,\r\n\tavatarType: PropTypes.oneOf(['false', 'none', 'icon', 'text']),\r\n\tprimaryLambda: PropTypes.func,\r\n\tgroupByLambda: PropTypes.func,\r\n\tavatarLambda: PropTypes.func,\r\n\tgoToLambda: PropTypes.func,\r\n\tnumbered: PropTypes.bool,\r\n}\r\n\r\nList.defaultProps = {\r\n  loading: false,\r\n  data: [],\r\n  displayItems: -1,\r\n  displayItemHeight: 60,\r\n  maxItems: 500,\r\n  minItems: 5,\r\n  summary: false,\r\n  style: {},\r\n  avatarType: 'none',\r\n  numbered: false,\r\n};\r\n\r\nexport default List;\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  text-align: left;\r\n`;\r\n\r\nconst Overlay = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    background-color: rgba(0,0,0,0.1);\r\n    z-index: 2;\r\n    text-align: center;\r\n    color: white;\r\n`;\r\n","import React from 'react'\r\nimport GridContainer from 'core/ui/layout/grid_container';\r\nimport GridItem from 'core/ui/layout/grid_item';\r\nimport Placeholder from 'core/ui/placeholder';\r\nimport Indicator from 'components/entities/dashboard/indicator';\r\nimport Dataset from \"components/entities/dashboard/dataset\";\r\nimport TextLink from \"core/ui/text-link\"\r\nimport BannerCarousel from './banner-carousel'\r\nimport withData from './data/with-data-stories-movie-awards'\r\n\r\nconst Banner = function( props ){\r\n    const { data, loading } = props;\r\n\r\n    return (\r\n      <div style={{width: '100%'}}>\r\n        <GridContainer justifyContent='center' fill style={{width: '100%'}}>\r\n          <GridItem xs={12} sm={12} md={12}>\r\n              <h1>Movies Awards</h1>\r\n          </GridItem>\r\n          <GridItem xs={12} sm={12} md={12}>\r\n              <BannerCarousel data={data}/>\r\n          </GridItem>\r\n          <GridItem xs={12} sm={12} md={12}>\r\n              <TextLink border href=\"/movies/stories/awards\"> See all</TextLink>\r\n          </GridItem>\r\n        </GridContainer>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default withData(Banner);","import React from 'react'\r\nimport GridContainer from 'core/ui/layout/grid_container';\r\nimport GridItem from 'core/ui/layout/grid_item';\r\nimport Placeholder from 'core/ui/placeholder';\r\nimport Indicator from 'components/entities/dashboard/indicator';\r\nimport Dataset from \"components/entities/dashboard/dataset\";\r\nimport TextLink from \"core/ui/text-link\"\r\nimport BannerCarousel from './banner-carousel'\r\nimport withData from './data/with-data-stories-podcast-music'\r\n\r\nconst Banner = function( props ){\r\n    const { data, loading } = props;\r\n    return (\r\n      <div style={{width: '100%'}}>\r\n        <GridContainer justifyContent='center' fill style={{width: '100%'}}>\r\n          <GridItem xs={12} sm={12} md={12}>\r\n              <h1>Music Podcasts</h1>\r\n          </GridItem>\r\n          <GridItem xs={12} sm={12} md={12}>\r\n              <BannerCarousel data={data}/>\r\n          </GridItem>\r\n          <GridItem xs={12} sm={12} md={12}>\r\n              <TextLink border href=\"/podcasts/stories/music\"> See all</TextLink>\r\n          </GridItem>\r\n        </GridContainer>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default withData(Banner);"],"names":[],"sourceRoot":""}