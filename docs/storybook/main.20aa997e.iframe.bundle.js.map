{"version":3,"file":"main.20aa997e.iframe.bundle.js","mappings":";;;;;;;;AA0DA;;;;;;;;;;ACuLA","sources":["webpack://react/./src/framework/core/ui/horizontal-list.js","webpack://react/./src/framework/core/ui/list.js"],"sourcesContent":["import React from 'react';\nimport styled, { css } from 'styled-components'\nimport PropTypes from 'prop-types';\nimport Placeholder from 'core/ui/placeholder';\n\n\nclass HorizontalList extends React.Component {\n  render(){    \n    const { data, loading } = this.props;\n    if(!data || loading) return this.renderPlaceholder();\n    return this.renderContent(data);\n  }\n\n  renderContent(data){\n    return this.renderTemplate(data);\n  }\n\n  renderPlaceholder(){\n    var items = []\n    new Array(1,2,3).map((item, idx)=>items.push(<Placeholder data={[[[\"-\", \"80\", \"10\"]]]}/>))\n    return this.renderTemplate(items);\n  }\n\n  renderTemplate(items){   \n  \treturn (\n  \t\t<Container>\n  \t\t\t{items.map((item, idx) =>\n  \t\t\t\t<ContainerItem key={idx}>\n  \t\t\t\t\t{item}\n  \t\t\t\t</ContainerItem>\n\t\t\t)}\n  \t\t</Container>\n\t)\n  }\n}\n\n\nHorizontalList.propTypes = {\n  data: PropTypes.array,\n  loading: PropTypes.bool,\n};\n\nHorizontalList.defaultProps = {\n  loading: false,\n};\n\nexport default HorizontalList;\n\nconst Container = styled.div`\n  width: 100%;\n  flex-orientation: column;\n  display: flex;\n  margin: 0;\n  padding: 0;\n  overflow: auto;\n  box-sizing: border-box;\n`;\n\nconst ContainerItem = styled.div`\n\tborder: 1px solid #c0c0c0;\n\tpadding: 0rem;\n\tpadding-right: 0.5rem;\n\tmax-width: 100%;\n\tbox-sizing: border-box;\n`;\n\n\n\n","import React, { Suspense, lazy } from 'react';\nimport styled, { css } from 'styled-components'\nimport PropTypes from 'prop-types';\n\nimport Link from './link';\nimport Placeholder from './placeholder';\nimport MDAvatar from '@material-ui/core/Avatar';\nimport MDList from '@material-ui/core/List';\nimport MDListItem from '@material-ui/core/ListItem';\nimport MDListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport MDListItemText from '@material-ui/core/ListItemText';\nimport MDListSubheader from '@material-ui/core/ListSubheader';\nimport MDDivider from '@material-ui/core/Divider';\nimport Loading from 'core/components/loading';\n\nconst FixedSizeList = lazy(() => import(/* webpackChunkName: \"react-window\" */ './external/fixed-size-list'));\n\n\nimport './list.scss';\n\nclass List extends React.Component {\n  constructor(){\n    super();\n\n    this.state = {\n      msg : null,\n      positions: [],\n      items : [],\n    }\n\n    this.group = \"\";    \n  }\n\n  componentDidUpdate(prevProps) {\n    if(prevProps.data !== this.props.data || prevProps.minItems !== this.props.minItems){\n      this.setData(this.props.data);\n    }\n  }\n\n  componentDidMount(){\n    this.setData(this.props.data);\n  }\n\n  setData(data){\n    var { maxItems, minItems, groupByLambda } = this.props;\n    var msg = null;\n\n    if(Array.isArray(data) || data == null){\n      data = (data) ? data.slice(0,maxItems) : [];\n    } else {\n      msg = \"data is not an array\";\n      data = null;\n    }\n\n    data = (data) ? data : [];\n\n    minItems = (data.length < minItems) ? minItems : data.length;\n\n    var items = [];\n    var grp = null;\n    for(var i = 0; i < minItems; i++){\n      if(data.length > i){\n        if(groupByLambda){\n          var ngroup = this.props.groupByLambda(data[i]);\n          if(grp != ngroup){\n            grp = ngroup;\n            items.push({type: 'grp', data: grp})\n          }\n        }\n        items.push({type: 'item', data: data[i], idx: i})\n      } else {\n        items.push({type: 'ph', data: null})\n      }\n    }\n\n    if(!msg && data.length == 0){\n      msg = \"no items\"\n    }\n    \n    //console.log(\"setdata\", msg, items.length, data.length);\n\n    this.setState({minItems: minItems, maxItems: maxItems, items: items, msg: msg})\n  }\n\n  render() {\n  \tvar { displayItems, displayItemHeight, loading, summary, style } = this.props;\n  \t//console.log(this.state.msg)\n    return (\n        <Container className={'core-ui-list'} style={style}>\n          {this.state.msg && !loading && <Overlay>{this.state.msg}</Overlay>}\n          <div className={`${(this.state.msg) ? 'blur' : ''} list`}>\n            {summary && \n              <div>\n                  {`${this.state.items.length} record(s)`}\n              </div>     \n            }                                          \n            {(displayItems > -1) ?\n              this.renderVirtualList(displayItems, displayItemHeight)\n              :\n              this.renderList()\n            }\n          </div>\n        </Container>\n    );\n  }\n\n  renderVirtualList(displayItems, displayItemHeight){\n    var items = this.state.items;  \n    return (\n      <Suspense fallback={<Loading/>}>\n        <FixedSizeList height={displayItemHeight * displayItems} width={'100%'} itemSize={displayItemHeight} itemCount={items.length}>\n          {({index, style}) => (\n            this.renderListItem(items[index], (items.length > index + 1), style, index)\n          )}\n        </FixedSizeList>                    \n      </Suspense>\n    )\n  }\n\n  renderList(){\n    var items = this.state.items;  \n    return (\n      <MDList>\n        {items.map((item, idx)=>\n          this.renderListItem(item, (items.length > idx + 1), {}, idx)\n        )}\n      </MDList>\n    )\n  }\n\n  renderListItem(item, divider, style, key){\n    return (\n      <div style={style} key={key}>\n        {this.renderNext(item)}\n        {(divider) && <MDDivider/>}    \n      </div>\n    )\n  }\n\n  renderNext(item){\n    if(this.props.loading) return <ListItemPlaceholder {...this.props}/>;\n    if(item.type === \"ph\") return <ListItemEmpty {...this.props}/>;\n    if(item.type === \"grp\") return <MDListSubheader className='item-subheader'>{item.data}</MDListSubheader>\n\n    return this.renderItem(item)\n  }\n\n  renderItem(item){\n    if(this.props.goToLambda){\n      return (\n        <Link border={false} to={this.props.goToLambda(item.data)}>\n          <ListItem button item={item} {...this.props}/>\n        </Link>         \n      )\n    } else {\n      return (\n        <ListItem item={item} {...this.props} />        \n      )\n    }\n  }\n}\n\nfunction ListItemPlaceholder({avatarType}){\n    return (\n      <MDListItem>\n          {(avatarType !== false && avatarType !== 'none') &&\n\t          <MDListItemAvatar><MDAvatar> </MDAvatar></MDListItemAvatar>\n          }\n          <MDListItemText primary={<Placeholder data={[[[\"-\", 220, 10]]]}/>}/>\n      </MDListItem>     \n    )\n}\n\nfunction ListItemEmpty({avatarType}){\n  return (\n      <MDListItem>\n          {(avatarType !== false && avatarType !== 'none') &&\n\t          <MDListItemAvatar><MDAvatar> </MDAvatar></MDListItemAvatar>\n          }\n          <MDListItemText primary={\" \"}/>\n      </MDListItem>     \n    )\n}\n\nfunction ListItem({item, button, avatarType, avatarLambda, primaryLambda, numbered, onItemClick}){\n  var idx = item.idx;\n  item = item.data;\n  avatarLambda = (avatarLambda) ? avatarLambda : (item=>item);\n\n  return (\n      <MDListItem className='item' button={button} onClick={()=>(onItemClick) ? onItemClick(item)  : null}>\n          {(numbered === true) && <div className='num'>{idx + 1}</div>}\n          {(avatarType !== false && avatarType !== 'none') &&\n            ((avatarType === \"icon\" || avatarType === \"text\") ?\n              <MDListItemAvatar><MDAvatar>{avatarLambda(item)}</MDAvatar></MDListItemAvatar>\n            :\n              <MDListItemAvatar><MDAvatar src={avatarLambda(item)}></MDAvatar></MDListItemAvatar>\n          )}\n          <MDListItemText primary={primaryLambda(item)}/>\n      </MDListItem>\n    )\n}\n\nList.propTypes = {\n\tloading: PropTypes.bool,\n\tdata: PropTypes.array,\n\tdisplayItems: PropTypes.number,\n\tmaxItems: PropTypes.number,\n\tminItems: PropTypes.number,\n\tdisplayItemHeight: PropTypes.number,\n\tsummary: PropTypes.bool,\n\tstyle: PropTypes.object,\n\tavatarType: PropTypes.oneOf(['false', 'none', 'icon', 'text']),\n\tprimaryLambda: PropTypes.func,\n\tgroupByLambda: PropTypes.func,\n\tavatarLambda: PropTypes.func,\n\tgoToLambda: PropTypes.func,\n\tnumbered: PropTypes.bool,\n}\n\nList.defaultProps = {\n  loading: false,\n  data: [],\n  displayItems: -1,\n  displayItemHeight: 60,\n  maxItems: 500,\n  minItems: 5,\n  summary: false,\n  style: {},\n  avatarType: 'none',\n  numbered: false,\n};\n\nexport default List;\n\nconst Container = styled.div`\n  position: relative;\n  width: 100%;\n  text-align: left;\n`;\n\nconst Overlay = styled.div`\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background-color: rgba(0,0,0,0.1);\n    z-index: 2;\n    text-align: center;\n    color: white;\n`;\n"],"names":[],"sourceRoot":""}