(self["webpackChunkreact"] = self["webpackChunkreact"] || []).push([["src_project_service-worker_js"],{

/***/ "./src/project/service-worker.js":
/*!***************************************!*\
  !*** ./src/project/service-worker.js ***!
  \***************************************/
/***/ (() => {

// Set this to true for production
var doCache = false; // Name our cache

var CACHE_NAME = 'my-pwa-cache-v1'; // Delete old caches that are not our current one!

self.addEventListener("activate", function (event) {
  var cacheWhitelist = [CACHE_NAME];
  event.waitUntil(caches.keys().then(function (keyList) {
    return Promise.all(keyList.map(function (key) {
      if (!cacheWhitelist.includes(key)) {
        console.log('Deleting cache: ' + key);
        return caches["delete"](key);
      }
    }));
  }));
}); // The first time the user starts up the PWA, 'install' is triggered.

self.addEventListener('install', function (event) {
  if (doCache) {
    event.waitUntil(caches.open(CACHE_NAME).then(function (cache) {
      // Get the assets manifest so we can see what our js file is named
      // This is because webpack hashes it
      fetch("asset-manifest.json").then(function (response) {
        response.json();
      }).then(function (assets) {
        // Open a cache and cache our files
        // We want to cache the page and the main.js generated by webpack
        // We could also cache any static assets like CSS or images
        var urlsToCache = ["/", assets["main.js"]];
        cache.addAll(urlsToCache);
        console.log('cached');
      });
    }));
  }
}); // When the webpage goes to fetch files, we intercept that request and serve up the matching files
// if we have them

self.addEventListener('fetch', function (event) {
  if (doCache) {
    event.respondWith(caches.match(event.request).then(function (response) {
      return response || fetch(event.request);
    }));
  }
});

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjX3Byb2plY3Rfc2VydmljZS13b3JrZXJfanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBLElBQUlBLE9BQU8sR0FBRyxLQUFkLEVBRUE7O0FBQ0EsSUFBSUMsVUFBVSxHQUFHLGlCQUFqQixFQUVBOztBQUNBQyxJQUFJLENBQUNDLGdCQUFMLENBQXNCLFVBQXRCLEVBQWtDLFVBQUFDLEtBQUssRUFBSTtBQUN6QyxNQUFNQyxjQUFjLEdBQUcsQ0FBQ0osVUFBRCxDQUF2QjtBQUNBRyxFQUFBQSxLQUFLLENBQUNFLFNBQU4sQ0FDRUMsTUFBTSxDQUFDQyxJQUFQLEdBQ0dDLElBREgsQ0FDUSxVQUFBQyxPQUFPO0FBQUEsV0FDWEMsT0FBTyxDQUFDQyxHQUFSLENBQVlGLE9BQU8sQ0FBQ0csR0FBUixDQUFZLFVBQUFDLEdBQUcsRUFBSTtBQUM3QixVQUFJLENBQUNULGNBQWMsQ0FBQ1UsUUFBZixDQUF3QkQsR0FBeEIsQ0FBTCxFQUFtQztBQUNqQ0UsUUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVkscUJBQXFCSCxHQUFqQztBQUNBLGVBQU9QLE1BQU0sVUFBTixDQUFjTyxHQUFkLENBQVA7QUFDRDtBQUNGLEtBTFcsQ0FBWixDQURXO0FBQUEsR0FEZixDQURGO0FBV0QsQ0FiRCxHQWVBOztBQUNBWixJQUFJLENBQUNDLGdCQUFMLENBQXNCLFNBQXRCLEVBQWlDLFVBQVNDLEtBQVQsRUFBZ0I7QUFDL0MsTUFBSUosT0FBSixFQUFhO0FBQ1hJLElBQUFBLEtBQUssQ0FBQ0UsU0FBTixDQUNFQyxNQUFNLENBQUNXLElBQVAsQ0FBWWpCLFVBQVosRUFDR1EsSUFESCxDQUNRLFVBQVNVLEtBQVQsRUFBZ0I7QUFDcEI7QUFDQTtBQUNBQyxNQUFBQSxLQUFLLENBQUMscUJBQUQsQ0FBTCxDQUNHWCxJQURILENBQ1EsVUFBQVksUUFBUSxFQUFJO0FBQ2hCQSxRQUFBQSxRQUFRLENBQUNDLElBQVQ7QUFDRCxPQUhILEVBSUdiLElBSkgsQ0FJUSxVQUFBYyxNQUFNLEVBQUk7QUFDZDtBQUNBO0FBQ0E7QUFDQSxZQUFNQyxXQUFXLEdBQUcsQ0FDbEIsR0FEa0IsRUFFbEJELE1BQU0sQ0FBQyxTQUFELENBRlksQ0FBcEI7QUFJQUosUUFBQUEsS0FBSyxDQUFDTSxNQUFOLENBQWFELFdBQWI7QUFDQVIsUUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksUUFBWjtBQUNELE9BZEg7QUFlRCxLQW5CSCxDQURGO0FBc0JEO0FBQ0YsQ0F6QkQsR0EyQkE7QUFDQTs7QUFDQWYsSUFBSSxDQUFDQyxnQkFBTCxDQUFzQixPQUF0QixFQUErQixVQUFTQyxLQUFULEVBQWdCO0FBQzNDLE1BQUlKLE9BQUosRUFBYTtBQUNYSSxJQUFBQSxLQUFLLENBQUNzQixXQUFOLENBQ0luQixNQUFNLENBQUNvQixLQUFQLENBQWF2QixLQUFLLENBQUN3QixPQUFuQixFQUE0Qm5CLElBQTVCLENBQWlDLFVBQVNZLFFBQVQsRUFBbUI7QUFDaEQsYUFBT0EsUUFBUSxJQUFJRCxLQUFLLENBQUNoQixLQUFLLENBQUN3QixPQUFQLENBQXhCO0FBQ0gsS0FGRCxDQURKO0FBS0Q7QUFDSixDQVJEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVhY3QvLi9zcmMvcHJvamVjdC9zZXJ2aWNlLXdvcmtlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTZXQgdGhpcyB0byB0cnVlIGZvciBwcm9kdWN0aW9uXG52YXIgZG9DYWNoZSA9IGZhbHNlO1xuXG4vLyBOYW1lIG91ciBjYWNoZVxudmFyIENBQ0hFX05BTUUgPSAnbXktcHdhLWNhY2hlLXYxJztcblxuLy8gRGVsZXRlIG9sZCBjYWNoZXMgdGhhdCBhcmUgbm90IG91ciBjdXJyZW50IG9uZSFcbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcihcImFjdGl2YXRlXCIsIGV2ZW50ID0+IHtcbiAgY29uc3QgY2FjaGVXaGl0ZWxpc3QgPSBbQ0FDSEVfTkFNRV07XG4gIGV2ZW50LndhaXRVbnRpbChcbiAgICBjYWNoZXMua2V5cygpXG4gICAgICAudGhlbihrZXlMaXN0ID0+XG4gICAgICAgIFByb21pc2UuYWxsKGtleUxpc3QubWFwKGtleSA9PiB7XG4gICAgICAgICAgaWYgKCFjYWNoZVdoaXRlbGlzdC5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRGVsZXRpbmcgY2FjaGU6ICcgKyBrZXkpXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkpXG4gICAgICApXG4gICk7XG59KTtcblxuLy8gVGhlIGZpcnN0IHRpbWUgdGhlIHVzZXIgc3RhcnRzIHVwIHRoZSBQV0EsICdpbnN0YWxsJyBpcyB0cmlnZ2VyZWQuXG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ2luc3RhbGwnLCBmdW5jdGlvbihldmVudCkge1xuICBpZiAoZG9DYWNoZSkge1xuICAgIGV2ZW50LndhaXRVbnRpbChcbiAgICAgIGNhY2hlcy5vcGVuKENBQ0hFX05BTUUpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGNhY2hlKSB7XG4gICAgICAgICAgLy8gR2V0IHRoZSBhc3NldHMgbWFuaWZlc3Qgc28gd2UgY2FuIHNlZSB3aGF0IG91ciBqcyBmaWxlIGlzIG5hbWVkXG4gICAgICAgICAgLy8gVGhpcyBpcyBiZWNhdXNlIHdlYnBhY2sgaGFzaGVzIGl0XG4gICAgICAgICAgZmV0Y2goXCJhc3NldC1tYW5pZmVzdC5qc29uXCIpXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgIHJlc3BvbnNlLmpzb24oKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKGFzc2V0cyA9PiB7XG4gICAgICAgICAgICAgIC8vIE9wZW4gYSBjYWNoZSBhbmQgY2FjaGUgb3VyIGZpbGVzXG4gICAgICAgICAgICAgIC8vIFdlIHdhbnQgdG8gY2FjaGUgdGhlIHBhZ2UgYW5kIHRoZSBtYWluLmpzIGdlbmVyYXRlZCBieSB3ZWJwYWNrXG4gICAgICAgICAgICAgIC8vIFdlIGNvdWxkIGFsc28gY2FjaGUgYW55IHN0YXRpYyBhc3NldHMgbGlrZSBDU1Mgb3IgaW1hZ2VzXG4gICAgICAgICAgICAgIGNvbnN0IHVybHNUb0NhY2hlID0gW1xuICAgICAgICAgICAgICAgIFwiL1wiLFxuICAgICAgICAgICAgICAgIGFzc2V0c1tcIm1haW4uanNcIl1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICBjYWNoZS5hZGRBbGwodXJsc1RvQ2FjaGUpXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjYWNoZWQnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgKTtcbiAgfVxufSk7XG5cbi8vIFdoZW4gdGhlIHdlYnBhZ2UgZ29lcyB0byBmZXRjaCBmaWxlcywgd2UgaW50ZXJjZXB0IHRoYXQgcmVxdWVzdCBhbmQgc2VydmUgdXAgdGhlIG1hdGNoaW5nIGZpbGVzXG4vLyBpZiB3ZSBoYXZlIHRoZW1cbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcignZmV0Y2gnLCBmdW5jdGlvbihldmVudCkge1xuICAgIGlmIChkb0NhY2hlKSB7XG4gICAgICBldmVudC5yZXNwb25kV2l0aChcbiAgICAgICAgICBjYWNoZXMubWF0Y2goZXZlbnQucmVxdWVzdCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UgfHwgZmV0Y2goZXZlbnQucmVxdWVzdCk7XG4gICAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxufSk7Il0sIm5hbWVzIjpbImRvQ2FjaGUiLCJDQUNIRV9OQU1FIiwic2VsZiIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsImNhY2hlV2hpdGVsaXN0Iiwid2FpdFVudGlsIiwiY2FjaGVzIiwia2V5cyIsInRoZW4iLCJrZXlMaXN0IiwiUHJvbWlzZSIsImFsbCIsIm1hcCIsImtleSIsImluY2x1ZGVzIiwiY29uc29sZSIsImxvZyIsIm9wZW4iLCJjYWNoZSIsImZldGNoIiwicmVzcG9uc2UiLCJqc29uIiwiYXNzZXRzIiwidXJsc1RvQ2FjaGUiLCJhZGRBbGwiLCJyZXNwb25kV2l0aCIsIm1hdGNoIiwicmVxdWVzdCJdLCJzb3VyY2VSb290IjoiIn0=