{"version":3,"sources":["logo.svg","components/TreeMap.js","components/dashboard/Countries.js","pages/Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["TreeMap","props","state","width","data","ref","React","createRef","this","current","offsetWidth","setState","parseMapToData","loading","error","toString","id","height","levelsToDisplay","nodeStyle","paddingLeft","paddingRight","resp","ranges","others","Object","keys","forEach","c","value","obj","name","i","length","range","children","push","k","Component","defaultProps","Countries","params","format","renderText","renderGraph","map","country","idxc","QRY_DASHBOARD","gql","Dashbaord","useQuery","console","log","dashboard","countries","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","process","cache","InMemoryCache","ReactDOM","render","ApolloProvider","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13f50dbf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { default as RDTreeMap }  from \"react-d3-treemap\";\nimport \"react-d3-treemap/dist/react.d3.treemap.css\";\n\nclass TreeMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 100,\n      data: null,\n    };\n\n    this.ref = React.createRef();\n  }\n\n  componentDidUpdate(){\n    var width = this.ref.current ? this.ref.current.offsetWidth : this.state.width;\n    if( width !== this.state.width){\n      this.setState({width: width})  \n    }\n  }\n\n  componentDidMount(){\n    var data = this.parseMapToData(this.props.data);\n    var width = this.ref.current ? this.ref.current.offsetWidth : this.state.width;\n    this.setState({data: data, width: width})\n  }\n\n  render() {\n    const { loading, error } = this.props;\n    const { data, width } = this.state;\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error { error.toString() }</p>;\n    if (!data) return <p>no data</p>\n\n    return <div id=\"___\" ref={this.ref}>\n        <RDTreeMap  \n          id=\"myTreeMap\"\n          width={width}\n          height={400}\n          data={data}\n          levelsToDisplay={1}\n          nodeStyle={{ paddingLeft: 5, paddingRight: 5 }}\n        />\n      </div>;\n  }\n\n  parseMapToData( data ){\n    if(!data) return {}\n\n    var resp = [];\n    var ranges = [ 10, 25, 100 ]\n    var others = {};\n    Object.keys(data).forEach( c => {\n      var value = data[c];\n      var obj = { name: c, value: value };\n      for( var i = 0; i < ranges.length; i++){\n        var range = ranges[i];\n        if( value > range ) continue;\n        if( !others[range] ) others[range] = { name: `${(i === 0) ? 1 : ranges[i - 1] + 1}-${range}`, value: 0, children: [] };\n        others[range].children.push( obj );\n        return;\n      }\n      resp.push( obj )\n    })\n\n    Object.keys(others).forEach( k => {\n      resp.push ( others[k] )  \n    })\n    \n    return { name: \"movies\", children: resp };\n  }\n\n}\n\n\nTreeMap.propTypes = {\n  data: PropTypes.object,\n};\n\nTreeMap.defaultProps = {\n  data: null,\n};\n\n\nexport default TreeMap;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TreeMap from \"../TreeMap\";\n\nexport default function Countries( params ){\n  const { loading, error, data, format } = params;\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error { error.toString() }</p>;\n\n  if (!data || data.length === 0) return \"NO DATA\";\n  \n  return <div>\n    {(format === \"text\") && renderText( data )}\n    {(format === \"graph\") && renderGraph( data )}\n  </div>;\n}\n\nfunction renderText( data ){\n  return <>\n      <p> Movies by country</p>\n      <div>\n        <ul> \n        { Object.keys(data).map( (country, idxc ) => (\n          <li key={idxc}> { country } : {data[country]} </li>\n        ))}\n        </ul>\n      </div>\n    </>\n}\n\nfunction renderGraph( data ){\n  return <TreeMap data={data}/>\n}\n\nCountries.propTypes = {\n  data: PropTypes.object,\n  format: PropTypes.oneOf(['text', 'graph']),\n};\n\nCountries.defaultProps = {\n  data: {},\n  format: \"text\",\n};\n\n\n","import Countries from '../components/dashboard/Countries';\n\nimport { gql, useQuery } from \"@apollo/client\";\n\nexport const QRY_DASHBOARD = gql`\n  query getDashboard{ \n    dashboard {\n      actors\n      countries\n      directors\n      genres\n      lastUpdate\n      movies\n      people\n      types\n      yearsAdded\n      yearsReleased\n    }\n  }`;\n\nexport default function Dashbaord() {\n  const { loading, error, data } = useQuery(QRY_DASHBOARD);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error { error.toString() }</p>;\n\n  console.log(data.dashboard.countries);\n\n  return <div>\n      <h1>Dashboard</h1>\n      <Countries data={data.dashboard.countries} format=\"graph\"/>\n    </div>\n}","import logo from './logo.svg';\nimport './App.css';\n\nimport Dashboard from './pages/Dashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\n\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_GRAPHQL_SERVER,\n  cache: new InMemoryCache()\n});\n\n/*\nconst client = new ApolloClient({\n  uri: 'https://jmarroyave-data-server-01.herokuapp.com/graphql',\n  cache: new InMemoryCache()\n});\n*/\n\n/*\nconst client = new ApolloClient({\n  uri: 'https://48p1r2roz4.sse.codesandbox.io',\n  cache: new InMemoryCache()\n});\n\n*/\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}