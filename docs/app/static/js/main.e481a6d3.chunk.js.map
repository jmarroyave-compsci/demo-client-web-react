{"version":3,"sources":["logo.svg","components/Movies.js","App.js","reportWebVitals.js","index.js"],"names":["QRY_MOVIES","gql","Movies","useQuery","loading","error","data","toString","movies","map","movie","idx","title","description","country","idxc","genre","idxg","App","className","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","StrictMode","document","getElementById"],"mappings":"2MAAe,G,MAAA,IAA0B,kC,uCCG5BA,EAAaC,YAAH,gJA0CRC,MA9Bf,WACE,MAAiCC,YAASH,GAAlCI,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAExB,OAAIF,EAAgB,2CAChBC,EAAc,uCAAWA,EAAME,cAE5BD,EAAKE,OAAOC,KAAI,SAAEC,EAAOC,GAAT,OACrB,gCACE,6BACGD,EAAME,QAET,4BAAKF,EAAMG,cACX,yCACE,6BACEH,EAAMI,QAAQL,KAAK,SAACK,EAASC,GAAV,OACnB,mCAAkBD,EAAlB,MAASC,WAIb,uCACE,6BACEL,EAAMM,MAAMP,KAAK,SAACO,EAAOC,GAAR,OACjB,mCAAkBD,EAAlB,MAASC,aAfLN,OCOCO,MAvBf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACO,8CADP,0BAGA,mBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,4BAUF,cAAC,EAAD,QCZSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,wBCERQ,EAAS,IAAIC,IAAa,CAC9BC,IAAK,gCACLC,MAAO,IAAIC,MAkBbC,IAASC,OACP,eAACC,EAAA,EAAD,CAAgBP,OAAQA,EAAxB,UACE,cAAC,IAAMQ,WAAP,UACE,cAAC,EAAD,MAFJ,OAKAC,SAASC,eAAe,SAO1BnB,M","file":"static/js/main.e481a6d3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { gql, useQuery } from \"@apollo/client\";\n\n\nexport const QRY_MOVIES = gql`\n  query getMovies{ \n    movies(limit:2) {\n      title\n      description\n      country\n      genre\n    }\n  }\n`;\n\n\nfunction Movies() {\n  const { loading, error, data } = useQuery(QRY_MOVIES);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error { error.toString() }</p>;\n\n  return data.movies.map(( movie, idx ) => (\n    <div key={idx}>\n      <h1>\n        {movie.title}\n      </h1>\n      <p>{ movie.description }</p>\n      <p> Country\n        <ul> \n        { movie.country.map( (country, idxc ) => (\n          <li key={idxc}> { country } </li>\n        ))}\n        </ul>\n      </p>\n      <p> Genre\n        <ul> \n        { movie.genre.map( (genre, idxg ) => (\n          <li key={idxg}> { genre } </li>\n        ))}\n        </ul>\n      </p>\n    </div>\n  ));\n}\n\nexport default Movies;\n","import logo from './logo.svg';\nimport './App.css';\n\n//import ExchangeRates from './components/ExchangeRates';\nimport Movies from './components/Movies';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n\n      <Movies/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\n\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:8080/graphql',\n  cache: new InMemoryCache()\n});\n\n/*\nconst client = new ApolloClient({\n  uri: 'https://jmarroyave-data-server-01.herokuapp.com/graphql',\n  cache: new InMemoryCache()\n});\n*/\n\n/*\nconst client = new ApolloClient({\n  uri: 'https://48p1r2roz4.sse.codesandbox.io',\n  cache: new InMemoryCache()\n});\n\n*/\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}